// First, apply the publishing plugin
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
      jcenter()
    }
  }
  dependencies {
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
  }
}

plugins {
  id 'groovy'
  id 'idea'
  id "org.ajoberstar.release-opinion" version "1.4.2"
  id 'com.gradle.plugin-publish' version '0.9.1'
  id 'java-gradle-plugin'
  id 'ru.vyarus.animalsniffer' version '1.4.2'
}

apply plugin: 'com.github.hierynomus.license'

defaultTasks 'build'

group = 'com.hierynomus.gradle.plugins'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories { jcenter() }

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

release {
  grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
}

configurations.compile.transitive = false

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

    compile "org.codehaus.plexus:plexus-utils:2.0.5"
    compile "com.mycila.xmltool:xmltool:3.3"
    // Using compile instead of groovy, so that it goes into the pom
    compile ('com.mycila:license-maven-plugin:3.0') {
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
    }
    compile gradleApi()

    def androidGradlePlugin = 'com.android.tools.build:gradle:2.0.+'
    compileOnly androidGradlePlugin
    testCompile androidGradlePlugin

    testCompile gradleTestKit()
    testCompile 'com.netflix.nebula:nebula-test:4.4.3'
    testCompile 'junit:junit:4.11'
    testCompile 'com.google.guava:guava:17.0'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    ignoreFailures true
}

test {
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

def pomConfig = {
    name project.name
    description project.project_description
    url project.project_url
    inceptionYear '2011'

    scm { url project.project_scm }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'hierynomus'
            name 'Jeroen van Erp'
            url 'http://www.javadude.nl/'
            email 'jeroen@javadude.nl'
            roles { role 'Developer' }
        }
    }

    contributors {
        contributor {
            name 'Tim Harsch'
            email 'harschware@yahoo.com'
        }
        contributor {
            name 'Justin Ryan'
            email 'jryan@netflix.com'
        }
    }
}

pluginBundle {
    website = "https://github.com/hierynomus/license-gradle-plugin"
    vcsUrl = "https://github.com/hierynomus/license-gradle-plugin.git"
    description = "Applies a header to files, typically a license"
    plugins {
        licensePlugin {
            id = "com.github.hierynomus.license"
            displayName = "License plugin for Gradle"
            tags = [ "gradle", "plugin", "license" ]
        }

        licenseBasePlugin {
            id = "com.github.hierynomus.license-base"
            displayName = "Base License plugin for Gradle"
            tags = [ "gradle", "plugin", "license" ]
        }

        licenseReportPlugin {
            id = "com.github.hierynomus.license-report"
            displayName = "License Report plugin for Gradle"
            tags = [ "gradle", "plugin", "license", "report" ]
        }
    }
}

if (!System.env.containsKey("JENKINS_URL")) {
    def javaVersion = System.properties['java.version']
    if (JavaVersion.toVersion(javaVersion) != project.targetCompatibility) {
//        throw new GradleException("Expected Java version ${project.targetCompatibility} but running with $javaVersion")
    }
}
